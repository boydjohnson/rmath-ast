use crate::parser::ast::{BinaryOp, Expr, Num, Term, Value, UnaryFunction};
use yajlish::ndjson_handler;
use lalrpop_util::ParseError;
use ordered_float::OrderedFloat;

grammar;

pub Float: f64 = r"[0-9]+([\.]|[e][-]?)[0-9]+" =>? {
    <>.parse::<f64>()
        .map_err(|_| ParseError::User {
            error: "f64 failed to parse"
        })
};

pub PosInt: u64 = r"[0-9]+" =>? {
    <>.parse::<u64>()
        .map_err(|_| ParseError::User {
            error: "u64 failed to parse"
        })
};

pub Int: i64 = r"[-][0-9]+" =>? {
    <>.parse::<i64>()
        .map_err(|_| ParseError::User {
            error: "i64 failed to parse"
        })
};

pub Num: Num = {
    <f:Float> => Num::Float(OrderedFloat(f)),
    <p:PosInt> => Num::PosInt(p),
    <i:Int> => Num::Int(i),
};

Bool: bool = r"true|false" => {
    match <> {
        "true" => true,
        "false" => false,
        _ => panic!("Was not true or false"),
    }
};

StringP: String = r#"".*""# => {
    <>.trim_start_matches('"').trim_end_matches('"').to_string()
};

Null = r"[nN]ull";

pub ValueToken: Value = {
    <n: Num> => Value::Num(n),
    <s: StringP> => Value::String(s),
    <b: Bool> => Value::Bool(b),
    <Null> => Value::Null,
}

pub IdentifierToken: ndjson_handler::Selector = r"\.[^\[\./\*\+\^ -]+" => ndjson_handler::Selector::Identifier(Into::into(<>.trim_start_matches('.')));

pub ArrayToken: ndjson_handler::Selector = {
    r"\[[0-9]+\]" =>? <>.trim_end_matches(']')
        .trim_start_matches('[')
        .parse::<usize>()
        .map_err(|_| ParseError::User {
        error: "Index too big",
    }).map(ndjson_handler::Selector::Index)
}

EitherToken: ndjson_handler::Selector = {
    <i:IdentifierToken> => i,
    <a:ArrayToken> => a,
}

pub Selector: Vec<ndjson_handler::Selector> = {
    "d" <r: EitherToken *> => {
        r
    },
}

pub Term: Box<Expr> = {
    <n:ValueToken> => Box::new(Expr::Term(Term::Value(n))),
    <s:Selector> => Box::new(Expr::Term(Term::Selector(s))),
    "(" <e:Expr> ")" => e,
    <u: UnaryFunction> "(" <e: Expr> ")" => Box::new(Expr::UnaryFunction(u, e)),
}

Argument<Name, Value>: (Name, Value) = {
    <n:Name> "=" <v:Value> => (n, v)
};

ExprMac<NextTier, Op>: Box<Expr> = {
    NextTier,
    <e:ExprMac<NextTier, Op>> <o:Op> <n:NextTier> => Box::new(Expr::Op(e, o, n)),
}

pub Expr: Box<Expr> = {
    ExprMac<Tier2, Tier1Op>,
};

Tier1Op: BinaryOp = {
   "+" => BinaryOp::Add,
   "-" => BinaryOp::Sub,
};

Tier2: Box<Expr> = {
    ExprMac<Tier3, Tier2Op>,
};

Tier2Op: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
};

Tier3Op: BinaryOp = {
    "**" => BinaryOp::Pow,
};

Tier3: Box<Expr> = {
    Term,
    <s:Tier3> <o:Tier3Op> <t:Term> => Box::new(Expr::Op(s, o, t)),
};

UnaryFunction: UnaryFunction = r"(abs|sqrt|floor|ceil|trunc|cos|sin|tan|acos|asin|atan|cosh|sinh|tanh|acosh|asinh|atanh|log|log10|exp|toupper|tolower|capitalize|tostring|isfloat|isfloatnan|isnull|tofloat|toint)" => {
    match <> {
        "abs" => UnaryFunction::Abs,
        "sqrt" => UnaryFunction::Sqrt,
        "floor" => UnaryFunction::Floor,
        "ceil" => UnaryFunction::Ceil,
        "trunc" => UnaryFunction::Trunc,
        "cos" => UnaryFunction::Cos,
        "sin" => UnaryFunction::Sin,
        "tan" => UnaryFunction::Tan,
        "acos" => UnaryFunction::ACos,
        "asin" => UnaryFunction::ASin,
        "atan" => UnaryFunction::ATan,
        "cosh" => UnaryFunction::Cosh,
        "sinh" => UnaryFunction::Sinh,
        "tanh" => UnaryFunction::Tanh,
        "acosh" => UnaryFunction::ACosh,
        "asinh" => UnaryFunction::ASinh,
        "atanh" => UnaryFunction::ATanh,
        "log" => UnaryFunction::Log,
        "log10" => UnaryFunction::Log10,
        "exp" => UnaryFunction::Exp,
        "toupper" => UnaryFunction::ToUpper,
        "tolower" => UnaryFunction::ToLower,
        "capitalize" => UnaryFunction::Capitalize,
        "tostring" => UnaryFunction::ToString,
        "isfloat" => UnaryFunction::IsFloat,
        "isfloatnan" => UnaryFunction::IsFloatNan,
        "isnull" => UnaryFunction::IsNull,
        "tofloat" => UnaryFunction::ToFloat,
        "toint" => UnaryFunction::ToInt,
        a => panic!("{} is not expected", a),
    }
};
